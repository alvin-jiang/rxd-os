

调度系统：
    已有：用户态抢占，中断抢占
    待实现：内核态抢占，主动抢占，睡眠-唤醒机制

硬盘驱动：
    统一接口，错误处理，缓冲，电梯算法


移植：
    1. char 类型在有些架构（intel）为有符号，有些架构（ARM）为无符号
        -> 定义 schar, uchar
    2. int, long 与 指针 的大小
        -> long, 指针 与机器字长相等（push的操作尺寸）
        -> int 在16位机器占2字节，在32和64位机器占4字节
        -> 定义固定长度的类型 u8, s8, u16, s16, u32, s32, ...
    3. 时间，CPU 频率
        -> 定义相关变量 Hz
        -> 启动时设定时钟的频率
    4. 结构对齐
        -> 开编译器选项 -Wpadded

    5. 字节序 [暂时忽略]
    6. 页长度 [暂时忽略]
        -> 根据体系结构定义 PAGE_SIZE, PAGE_SHIFT
    7. 指令排序，编译器优化带来的问题，改变指令的执行顺序
       加快执行速度（某些架构下） [暂时忽略]
        -> 要么关闭优化
        -> 要么实现内存屏障机制 rmb(), wmb(), smp_rmb(), smp_wmb()
    8. SMP, 内核抢占，高端内存 [暂时忽略]
        -> 如果内核要支持SMP架构，记得正确的选择和使用锁哟
        -> 如果内核要支持内核抢占，记得正确的选择和使用锁以及内核抢占语句哟
        -> 如果内核要支持高端内存，必要时使用kmap()


